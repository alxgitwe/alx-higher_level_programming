mporting the module and class:
>>> from 1-my_list import MyList
Checking if the class type is correct:
>>> my_list = MyList()
>>> type(my_list) is MyList
True
Checking if the instance is a list:
>>> my_list = MyList()
>>> isinstance(my_list, list)
True
Checking if the print_sorted method is an instance method:
>>> isinstance(MyList.print_sorted, classmethod)
False
Testing the print_sorted method with no arguments:
>>> my_list.print_sorted()
[]
Testing the print_sorted method with a list:
>>> my_list.print_sorted()
Traceback (most recent call last):
TypeError: print_sorted() takes 1 positional argument but 2 were given
Testing the print_sorted method with two arguments:
>>> my_list.print_sorted(, 1)
Traceback (most recent call last):
TypeError: print_sorted() takes 1 positional argument but 3 were given
Testing the print_sorted method with an empty list:
>>> my_list = MyList()
>>> my_list.print_sorted()
[]
Testing the print_sorted method with a normal list:
>>> my_list = MyList()
>>> my_list.print_sorted()
Testing the print_sorted method with a list of negative integers:
>>> my_list = MyList([-1000, -98, -232565, 0, -23423434, -123])
>>> my_list.print_sorted()
[-23423434, -232565, -1000, -123, -98, 0]
Checking if the original list is unchanged:
>>> my_list = MyList([2, 10, 1, -10, 20, 100, 0])
>>> my_list.print_sorted()
[-10, 0, 1, 2, 10, 20, 100]
>>> my_list
[2, 10, 1, -10, 20, 100, 0]
Testing the print_sorted method with a list that is already sorted:
>>> my_list = MyList([-10, 0, 1, 2, 10, 20, 100])
>>> my_list.print_sorted()
[-10, 0, 1, 2, 10, 20, 100]
Testing the append method:
>>> my_list = MyList()
>>> my_list.append(10)
>>> my_list
